{"version":3,"file":"NodeDeleteTransaction.js","sources":["../../src/node/NodeDeleteTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} ITransactionResponse\n */\n\n/**\n * @namespace com.hedera.hapi.node.addressbook\n * @typedef {import(\"@hashgraph/proto\").com.hedera.hapi.node.addressbook.INodeDeleteTransactionBody} INodeDeleteTransactionBody\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n */\n\n/**\n * A transaction to delete a consensus node in the network.\n */\nexport default class NodeDeleteTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {Long} [props.nodeId]\n     */\n    constructor(props) {\n        super();\n\n        /**\n         * @private\n         * @type {?Long}\n         * @description Consensus node identifier in the network state. It's required.\n         */\n        this._nodeId = props?.nodeId != null ? props.nodeId : null;\n    }\n\n    /**\n     * @internal\n     * @param {ITransaction[]} transactions\n     * @param {ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {ITransactionBody[]} bodies\n     * @returns {NodeDeleteTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const nodeDelete = /** @type {INodeDeleteTransactionBody} */ (\n            body.nodeDelete\n        );\n\n        return Transaction._fromProtobufTransactions(\n            new NodeDeleteTransaction({\n                nodeId:\n                    nodeDelete.nodeId != null ? nodeDelete.nodeId : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @param {Long} nodeId\n     * @description Set consensus node identifier.\n     * @returns {NodeDeleteTransaction}\n     */\n    setNodeId(nodeId) {\n        this._nodeId = nodeId;\n\n        return this;\n    }\n\n    /**\n     * @description Get consensus node identifier.\n     * @returns {?Long}\n     */\n    get nodeId() {\n        return this._nodeId;\n    }\n\n    /**\n     * @override\n     * @param {?import(\"../client/Client.js\").default<Channel, *>} client\n     * @returns {this}\n     */\n    freezeWith(client) {\n        if (this.nodeId == null) {\n            throw new Error(\n                \"NodeDeleteTransaction: 'nodeId' must be explicitly set before calling freeze().\",\n            );\n        }\n\n        return super.freezeWith(client);\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {ITransaction} request\n     * @returns {Promise<ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.addressBook.deleteNode(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"nodeDelete\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {INodeDeleteTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            nodeId: this._nodeId != null ? this._nodeId : null,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `NodeDeleteTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"nodeDelete\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    NodeDeleteTransaction._fromProtobuf,\n);\n"],"names":["NodeDeleteTransaction","Transaction","constructor","props","super","this","_nodeId","nodeId","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","nodeDelete","_fromProtobufTransactions","undefined","setNodeId","freezeWith","client","Error","_execute","channel","request","addressBook","deleteNode","_getTransactionDataCase","_makeTransactionData","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"wEA8Be,MAAMA,UAA8BC,EAK/C,WAAAC,CAAYC,GACRC,QAOAC,KAAKC,QAA2B,MAAjBH,GAAOI,OAAiBJ,EAAMI,OAAS,IAC9D,CAWI,oBAAOC,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAGnB,WAED,OAAOZ,EAAYc,0BACf,IAAIf,EAAsB,CACtBO,OACyB,MAArBO,EAAWP,OAAiBO,EAAWP,YAASS,IAExDP,EACAC,EACAC,EACAC,EACAC,EAEZ,CAOI,SAAAI,CAAUV,GAGN,OAFAF,KAAKC,QAAUC,EAERF,IACf,CAMI,UAAIE,GACA,OAAOF,KAAKC,OACpB,CAOI,UAAAY,CAAWC,GACP,GAAmB,MAAfd,KAAKE,OACL,MAAM,IAAIa,MACN,mFAIR,OAAOhB,MAAMc,WAAWC,EAChC,CASI,QAAAE,CAASC,EAASC,GACd,OAAOD,EAAQE,YAAYC,WAAWF,EAC9C,CAOI,uBAAAG,GACI,MAAO,YACf,CAOI,oBAAAC,GACI,MAAO,CACHpB,OAAwB,MAAhBF,KAAKC,QAAkBD,KAAKC,QAAU,KAE1D,CAKI,SAAAsB,GAII,MAAO,yBAFHvB,KAAKwB,gBAAgBC,QACxB,WACyCC,YAClD,EAGAC,EAAqBC,IACjB,aAEAjC,EAAsBQ"}