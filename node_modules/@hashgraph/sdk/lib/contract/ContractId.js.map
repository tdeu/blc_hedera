{"version":3,"file":"ContractId.js","sources":["../../src/contract/ContractId.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport * as EntityIdHelper from \"../EntityIdHelper.js\";\nimport Key from \"../Key.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport CACHE from \"../Cache.js\";\nimport * as hex from \"../encoding/hex.js\";\nimport { arrayEqual } from \"../array.js\";\nimport Long from \"long\";\nimport { isLongZeroAddress } from \"../util.js\";\nimport EvmAddress from \"../EvmAddress.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency contract on Hedera.\n */\nexport default class ContractId extends Key {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     * @param {Uint8Array=} evmAddress\n     */\n    constructor(props, realm, num, evmAddress) {\n        super();\n\n        const result = EntityIdHelper.constructor(props, realm, num);\n\n        this.shard = result.shard;\n        this.realm = result.realm;\n        this.num = result.num;\n\n        this.evmAddress = evmAddress != null ? evmAddress : null;\n\n        /**\n         * @type {string | null}\n         */\n        this._checksum = null;\n    }\n\n    /**\n     * @description This handles both long-zero format and evm address format addresses.\n     * If an actual evm address is passed, please use `ContractId.populateAccountNum(client)` method\n     * to get the actual `num` value, since there is no cryptographic relation to the evm address\n     * and cannot be populated directly\n     * @param {Long | number} shard\n     * @param {Long | number} realm\n     * @param {string} evmAddress\n     * @returns {ContractId}\n     */\n    static fromEvmAddress(shard, realm, evmAddress) {\n        const evmAddressObj = EvmAddress.fromString(evmAddress);\n\n        const [shardLong, realmLong, num, address] =\n            EntityIdHelper.fromEvmAddress(\n                shard,\n                realm,\n                evmAddressObj.toString(),\n            );\n\n        return new ContractId(shardLong, realmLong, num, address?.toBytes());\n    }\n\n    /**\n     * @param {string} text\n     * @returns {ContractId}\n     */\n    static fromString(text) {\n        const result = EntityIdHelper.fromStringSplitter(text);\n\n        if (Number.isNaN(result.shard) || Number.isNaN(result.realm)) {\n            throw new Error(\"invalid format for entity ID\");\n        }\n\n        const shard =\n            result.shard != null ? Long.fromString(result.shard) : Long.ZERO;\n        const realm =\n            result.realm != null ? Long.fromString(result.realm) : Long.ZERO;\n        const [num, evmAddress] =\n            result.numOrHex.length < 40\n                ? [Long.fromString(result.numOrHex), undefined]\n                : [Long.ZERO, hex.decode(result.numOrHex)];\n\n        return new ContractId(shard, realm, num, evmAddress);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IContractID} id\n     * @returns {ContractId}\n     */\n    static _fromProtobuf(id) {\n        const contractId = new ContractId(\n            id.shardNum != null ? id.shardNum : 0,\n            id.realmNum != null ? id.realmNum : 0,\n            id.contractNum != null ? id.contractNum : 0,\n        );\n\n        return contractId;\n    }\n\n    /**\n     * @returns {string | null}\n     */\n    get checksum() {\n        return this._checksum;\n    }\n\n    /**\n     * @description Gets the actual `num` field of the `ContractId` from the Mirror Node.\n     * Should be used after generating `ContractId.fromEvmAddress()` because it sets the `num` field to `0`\n     * automatically since there is no connection between the `num` and the `evmAddress`\n     * @param {Client} client\n     * @returns {Promise<ContractId>}\n     */\n    async populateAccountNum(client) {\n        if (this.evmAddress === null) {\n            throw new Error(\"field `evmAddress` should not be null\");\n        }\n        const mirrorUrl = client.mirrorNetwork[0].slice(\n            0,\n            client.mirrorNetwork[0].indexOf(\":\"),\n        );\n\n        /* eslint-disable */\n        const url = `https://${mirrorUrl}/api/v1/contracts/${hex.encode(\n            this.evmAddress,\n        )}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const mirrorAccountId = data.contract_id;\n\n        this.num = Long.fromString(\n            mirrorAccountId.slice(mirrorAccountId.lastIndexOf(\".\") + 1),\n        );\n        /* eslint-enable */\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `validateChecksum` instead\n     * @param {Client} client\n     */\n    validate(client) {\n        console.warn(\"Deprecated: Use `validateChecksum` instead\");\n        this.validateChecksum(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    validateChecksum(client) {\n        EntityIdHelper.validateChecksum(\n            this.shard,\n            this.realm,\n            this.num,\n            this._checksum,\n            client,\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {ContractId}\n     */\n    static fromBytes(bytes) {\n        return ContractId._fromProtobuf(\n            HieroProto.proto.ContractID.decode(bytes),\n        );\n    }\n\n    /**\n     * @deprecated - Use `fromEvmAddress` instead\n     * @param {string} address\n     * @returns {ContractId}\n     */\n    static fromSolidityAddress(address) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        if (isLongZeroAddress(hex.decode(address))) {\n            return new ContractId(\n                ...EntityIdHelper.fromSolidityAddress(address),\n            );\n        } else {\n            return this.fromEvmAddress(0, 0, address);\n        }\n    }\n\n    /**\n     * @deprecated - Use `toEvmAddress` instead\n     * @returns {string}\n     */\n    toSolidityAddress() {\n        if (this.evmAddress != null) {\n            return hex.encode(this.evmAddress);\n        } else {\n            return EntityIdHelper.toSolidityAddress([\n                this.shard,\n                this.realm,\n                this.num,\n            ]);\n        }\n    }\n\n    /**\n     * @returns {string} EVM-compatible address representation of the entity\n     */\n    toEvmAddress() {\n        if (this.evmAddress != null) {\n            return EntityIdHelper.toEvmAddress(this.evmAddress);\n        }\n\n        return EntityIdHelper.toEvmAddress(this.num);\n    }\n    /**\n     * @internal\n     * @returns {HieroProto.proto.IContractID}\n     */\n    _toProtobuf() {\n        return {\n            contractNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n            evmAddress: this.evmAddress,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        if (this.evmAddress != null) {\n            return `${this.shard.toString()}.${this.realm.toString()}.${hex.encode(\n                this.evmAddress,\n            )}`;\n        } else {\n            return `${this.shard.toString()}.${this.realm.toString()}.${this.num.toString()}`;\n        }\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {string}\n     */\n    toStringWithChecksum(client) {\n        return EntityIdHelper.toStringWithChecksum(this.toString(), client);\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.ContractID.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * @returns {ContractId}\n     */\n    clone() {\n        const id = new ContractId(this);\n        id._checksum = this._checksum;\n        id.evmAddress = this.evmAddress;\n        return id;\n    }\n\n    /**\n     * @param {ContractId} other\n     * @returns {number}\n     */\n    compare(other) {\n        return EntityIdHelper.compare(\n            [this.shard, this.realm, this.num],\n            [other.shard, other.realm, other.num],\n        );\n    }\n\n    /**\n     * @param {this} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        let evmAddresses = false;\n        if (this.evmAddress != null && other.evmAddress != null) {\n            evmAddresses = arrayEqual(this.evmAddress, other.evmAddress);\n        }\n\n        return (\n            this.shard.eq(other.shard) &&\n            this.realm.eq(other.realm) &&\n            this.num.eq(other.num) &&\n            evmAddresses\n        );\n    }\n\n    /**\n     * @returns {HieroProto.proto.IKey}\n     */\n    _toProtobufKey() {\n        return {\n            contractID: this._toProtobuf(),\n        };\n    }\n\n    /**\n     * @param {HieroProto.proto.IContractID} key\n     * @returns {ContractId}\n     */\n    static __fromProtobufKey(key) {\n        return ContractId._fromProtobuf(key);\n    }\n}\n\nCACHE.setContractId((key) => ContractId.__fromProtobufKey(key));\n"],"names":["ContractId","Key","constructor","props","realm","num","evmAddress","super","result","EntityIdHelper.constructor","this","shard","_checksum","fromEvmAddress","evmAddressObj","EvmAddress","fromString","shardLong","realmLong","address","EntityIdHelper.fromEvmAddress","toString","toBytes","text","EntityIdHelper.fromStringSplitter","Number","isNaN","Error","Long","ZERO","numOrHex","length","undefined","hex.decode","_fromProtobuf","id","shardNum","realmNum","contractNum","checksum","populateAccountNum","client","url","mirrorNetwork","slice","indexOf","hex.encode","response","fetch","mirrorAccountId","json","contract_id","lastIndexOf","validate","console","warn","validateChecksum","EntityIdHelper.validateChecksum","fromBytes","bytes","HieroProto","proto","ContractID","decode","fromSolidityAddress","isLongZeroAddress","EntityIdHelper.fromSolidityAddress","toSolidityAddress","EntityIdHelper.toSolidityAddress","toEvmAddress","EntityIdHelper.toEvmAddress","_toProtobuf","toStringWithChecksum","EntityIdHelper.toStringWithChecksum","encode","finish","clone","compare","other","EntityIdHelper.compare","equals","evmAddresses","arrayEqual","eq","_toProtobufKey","contractID","__fromProtobufKey","key","CACHE","setContractId"],"mappings":"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"}