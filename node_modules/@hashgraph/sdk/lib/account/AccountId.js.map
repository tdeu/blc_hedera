{"version":3,"file":"AccountId.js","sources":["../../src/account/AccountId.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Long from \"long\";\nimport * as EntityIdHelper from \"../EntityIdHelper.js\";\nimport * as HieroProto from \"@hashgraph/proto\";\nimport Key from \"../Key.js\";\nimport PublicKey from \"../PublicKey.js\";\nimport CACHE from \"../Cache.js\";\nimport EvmAddress from \"../EvmAddress.js\";\nimport * as hex from \".././encoding/hex.js\";\nimport { isLongZeroAddress } from \"../util.js\";\n\n/**\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n */\n\n/**\n * The ID for a crypto-currency account on Hedera.\n */\nexport default class AccountId {\n    /**\n     * @param {number | Long | import(\"../EntityIdHelper\").IEntityId} props\n     * @param {(number | Long)=} realm\n     * @param {(number | Long)=} num\n     * @param {(PublicKey)=} aliasKey\n     * @param {(EvmAddress)=} evmAddress\n     */\n    constructor(props, realm, num, aliasKey, evmAddress) {\n        const result = EntityIdHelper.constructor(props, realm, num);\n\n        this.shard = result.shard;\n        this.realm = result.realm;\n        this.num = result.num;\n        this.aliasKey = aliasKey != null ? aliasKey : null;\n        this.evmAddress = evmAddress != null ? evmAddress : null;\n\n        /**\n         * @type {string | null}\n         */\n        this._checksum = null;\n    }\n\n    /**\n     * @description Accepts the following formats as string:\n     *      - as stand alone nubmers\n     *      - as shard.realm.num\n     *      - as shard.realm.hex (wo 0x prefix)\n     *      - hex (w/wo 0x prefix)\n     * @param {string} text\n     * @returns {AccountId}\n     */\n    static fromString(text) {\n        let shard = Long.ZERO;\n        let realm = Long.ZERO;\n        let num = Long.ZERO;\n        let aliasKey = undefined;\n        let evmAddress = undefined;\n\n        if ((text.startsWith(\"0x\") && text.length == 42) || text.length == 40) {\n            evmAddress = EvmAddress.fromString(text);\n        } else {\n            const result = EntityIdHelper.fromStringSplitter(text);\n\n            if (Number.isNaN(result.shard) || Number.isNaN(result.realm)) {\n                throw new Error(\"invalid format for entity ID\");\n            }\n\n            if (result.shard != null) shard = Long.fromString(result.shard);\n            if (result.realm != null) realm = Long.fromString(result.realm);\n\n            if (result.numOrHex.length < 20) {\n                num = Long.fromString(result.numOrHex);\n            } else if (result.numOrHex.length == 40) {\n                evmAddress = EvmAddress.fromString(result.numOrHex);\n            } else {\n                aliasKey = PublicKey.fromString(result.numOrHex);\n            }\n        }\n\n        return new AccountId(shard, realm, num, aliasKey, evmAddress);\n    }\n\n    /**\n     * @description This handles both long-zero format and evm address format addresses.\n     * If an actual evm address is passed, please use `AccountId.populateAccountNum(client)` method\n     * to get the actual `num` value, since there is no cryptographic relation to the evm address\n     * and cannot be populated directly\n     * @param {Long | number} shard\n     * @param {Long | number} realm\n     * @param {EvmAddress | string} evmAddress\n     * @returns {AccountId}\n     */\n    static fromEvmAddress(shard, realm, evmAddress) {\n        const evmAddressObj =\n            typeof evmAddress === \"string\"\n                ? EvmAddress.fromString(evmAddress)\n                : evmAddress;\n\n        const [shardLong, realmLong, num, address] =\n            EntityIdHelper.fromEvmAddress(\n                shard,\n                realm,\n                evmAddressObj.toString(),\n            );\n\n        return new AccountId(\n            shardLong,\n            realmLong,\n            num,\n            undefined,\n            address || undefined,\n        );\n    }\n\n    /**\n     * @deprecated - Use `fromEvmAddress` instead\n     * @summary Accepts an evm address only as `EvmAddress` type\n     * @param {EvmAddress} evmAddress\n     * @returns {AccountId}\n     */\n    static fromEvmPublicAddress(evmAddress) {\n        return new AccountId(0, 0, 0, undefined, evmAddress);\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.IAccountID} id\n     * @returns {AccountId}\n     */\n    static _fromProtobuf(id) {\n        let aliasKey = undefined;\n        let evmAddress = undefined;\n\n        if (id.alias != null) {\n            if (id.alias.length === 20) {\n                evmAddress = EvmAddress.fromBytes(id.alias);\n            } else {\n                aliasKey = Key._fromProtobufKey(\n                    HieroProto.proto.Key.decode(id.alias),\n                );\n            }\n        }\n\n        if (!(aliasKey instanceof PublicKey)) {\n            aliasKey = undefined;\n        }\n\n        return new AccountId(\n            id.shardNum != null ? id.shardNum : 0,\n            id.realmNum != null ? id.realmNum : 0,\n            id.accountNum != null ? id.accountNum : 0,\n            aliasKey,\n            evmAddress,\n        );\n    }\n\n    /**\n     * @returns {string | null}\n     */\n    get checksum() {\n        return this._checksum;\n    }\n\n    /**\n     * @returns {?EvmAddress}\n     */\n    getEvmAddress() {\n        return this.evmAddress;\n    }\n\n    /**\n     * @description Gets the actual `num` field of the `AccountId` from the Mirror Node.\n     * Should be used after generating `AccountId.fromEvmAddress()` because it sets the `num` field to `0`\n     * automatically since there is no connection between the `num` and the `evmAddress`\n     * @param {Client} client\n     * @returns {Promise<AccountId>}\n     */\n    async populateAccountNum(client) {\n        if (this.evmAddress === null) {\n            throw new Error(\"field `evmAddress` should not be null\");\n        }\n        const mirrorUrl = client.mirrorNetwork[0].slice(\n            0,\n            client.mirrorNetwork[0].indexOf(\":\"),\n        );\n\n        await new Promise((resolve) => {\n            setTimeout(resolve, 3000);\n        });\n\n        /* eslint-disable */\n        const url = `https://${mirrorUrl}/api/v1/accounts/${this.evmAddress.toString()}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const mirrorAccountId = data.account;\n\n        this.num = Long.fromString(\n            mirrorAccountId.slice(mirrorAccountId.lastIndexOf(\".\") + 1),\n        );\n        /* eslint-enable */\n\n        return this;\n    }\n\n    /**\n     * @description Populates `evmAddress` field of the `AccountId` extracted from the Mirror Node.\n     * @param {Client} client\n     * @returns {Promise<AccountId>}\n     */\n    async populateAccountEvmAddress(client) {\n        if (this.num === null) {\n            throw new Error(\"field `num` should not be null\");\n        }\n        const mirrorUrl = client.mirrorNetwork[0].slice(\n            0,\n            client.mirrorNetwork[0].indexOf(\":\"),\n        );\n\n        await new Promise((resolve) => {\n            setTimeout(resolve, 3000);\n        });\n\n        /* eslint-disable */\n        const url = `https://${mirrorUrl}/api/v1/accounts/${this.num.toString()}`;\n        const response = await fetch(url);\n        const data = await response.json();\n        const mirrorAccountId = data.evm_address;\n\n        this.evmAddress = EvmAddress.fromString(mirrorAccountId);\n        /* eslint-enable */\n\n        return this;\n    }\n\n    /**\n     * @deprecated - Use `validateChecksum` instead\n     * @param {Client} client\n     */\n    validate(client) {\n        console.warn(\"Deprecated: Use `validateChecksum` instead\");\n        this.validateChecksum(client);\n    }\n\n    /**\n     * @param {Client} client\n     */\n    validateChecksum(client) {\n        if (this.aliasKey != null) {\n            throw new Error(\n                \"cannot calculate checksum with an account ID that has a aliasKey\",\n            );\n        }\n\n        EntityIdHelper.validateChecksum(\n            this.shard,\n            this.realm,\n            this.num,\n            this._checksum,\n            client,\n        );\n    }\n\n    /**\n     * @param {Uint8Array} bytes\n     * @returns {AccountId}\n     */\n    static fromBytes(bytes) {\n        return AccountId._fromProtobuf(\n            HieroProto.proto.AccountID.decode(bytes),\n        );\n    }\n\n    /**\n     * @deprecated - Use `fromEvmAddress` instead\n     * @param {string} address\n     * @returns {AccountId}\n     */\n    static fromSolidityAddress(address) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        if (isLongZeroAddress(hex.decode(address))) {\n            return new AccountId(\n                ...EntityIdHelper.fromSolidityAddress(address),\n            );\n        } else {\n            return this.fromEvmAddress(0, 0, address);\n        }\n    }\n\n    /**\n     * @description Statically compute the EVM address. Use only with non-native EVM accounts.\n     * @deprecated - Use `toEvmAddress` instead\n     * If the account is EVM-native, the EVM address depends on the public key and is not directly related to the account ID.\n     * @returns {string}\n     */\n    toSolidityAddress() {\n        if (this.evmAddress != null) {\n            return this.evmAddress.toString();\n        } else if (\n            this.aliasKey != null &&\n            this.aliasKey._key._type == \"secp256k1\"\n        ) {\n            return this.aliasKey.toEvmAddress();\n        } else {\n            return EntityIdHelper.toSolidityAddress([\n                this.shard,\n                this.realm,\n                this.num,\n            ]);\n        }\n    }\n\n    /**\n     * @returns {string} EVM-compatible address representation of the entity\n     */\n    toEvmAddress() {\n        if (this.evmAddress != null) {\n            return EntityIdHelper.toEvmAddress(this.evmAddress.toBytes());\n        }\n\n        return EntityIdHelper.toEvmAddress(this.num);\n    }\n\n    //TODO remove the comments after we get to HIP-631\n    /**\n     * @internal\n     * @returns {HieroProto.proto.IAccountID}\n     */\n    _toProtobuf() {\n        let alias = null;\n        //let evmAddress = null;\n\n        if (this.aliasKey != null) {\n            alias = HieroProto.proto.Key.encode(\n                this.aliasKey._toProtobufKey(),\n            ).finish();\n        } else if (this.evmAddress != null) {\n            alias = this.evmAddress._bytes;\n        }\n\n        /* if (this.evmAddress != null) {\n            evmAddress = this.evmAddress._bytes;\n        } */\n\n        const isHollowAccount = this.num.eq(Long.fromBigInt(0n)) && alias;\n\n        if (alias) {\n            return {\n                alias: isHollowAccount ? alias : null,\n                accountNum: isHollowAccount ? null : this.num,\n                shardNum: this.shard,\n                realmNum: this.realm,\n            };\n        }\n        return {\n            alias: null,\n            accountNum: this.num,\n            shardNum: this.shard,\n            realmNum: this.realm,\n        };\n    }\n\n    /**\n     * @returns {Uint8Array}\n     */\n    toBytes() {\n        return HieroProto.proto.AccountID.encode(this._toProtobuf()).finish();\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        let account = this.num.toString();\n\n        if (this.aliasKey != null) {\n            account = this.aliasKey.toString();\n        } else if (this.evmAddress != null) {\n            account = this.evmAddress.toString();\n        }\n\n        return `${this.shard.toString()}.${this.realm.toString()}.${account}`;\n    }\n\n    /**\n     * @param {Client} client\n     * @returns {string}\n     */\n    toStringWithChecksum(client) {\n        if (this.aliasKey != null) {\n            throw new Error(\n                \"cannot calculate checksum with an account ID that has a aliasKey\",\n            );\n        }\n\n        return EntityIdHelper.toStringWithChecksum(this.toString(), client);\n    }\n\n    /**\n     * @param {this} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        let account = false;\n\n        if (this.aliasKey != null && other.aliasKey != null) {\n            account = this.aliasKey.equals(other.aliasKey);\n        } else if (this.evmAddress != null && other.evmAddress != null) {\n            account = this.evmAddress.equals(other.evmAddress);\n        } else if (\n            this.aliasKey == null &&\n            other.aliasKey == null &&\n            this.evmAddress == null &&\n            other.evmAddress == null\n        ) {\n            account = this.num.eq(other.num);\n        }\n\n        return (\n            this.shard.eq(other.shard) && this.realm.eq(other.realm) && account\n        );\n    }\n\n    /**\n     * @returns {AccountId}\n     */\n    clone() {\n        const id = new AccountId(this);\n        id._checksum = this._checksum;\n        id.aliasKey = this.aliasKey;\n        id.evmAddress = this.evmAddress;\n        return id;\n    }\n\n    /**\n     * @param {AccountId} other\n     * @returns {number}\n     */\n    compare(other) {\n        let comparison = this.shard.compare(other.shard);\n        if (comparison != 0) {\n            return comparison;\n        }\n\n        comparison = this.realm.compare(other.realm);\n        if (comparison != 0) {\n            return comparison;\n        }\n\n        if (this.aliasKey != null && other.aliasKey != null) {\n            const t = this.aliasKey.toString();\n            const o = other.aliasKey.toString();\n\n            if (t > o) {\n                return 1;\n            } else if (t < o) {\n                return -1;\n            } else {\n                return 0;\n            }\n        } else if (this.evmAddress != null && other.evmAddress != null) {\n            const t = this.evmAddress.toString();\n            const o = other.evmAddress.toString();\n\n            if (t > o) {\n                return 1;\n            } else if (t < o) {\n                return -1;\n            } else {\n                return 0;\n            }\n        } else if (\n            this.aliasKey == null &&\n            other.aliasKey == null &&\n            this.evmAddress == null &&\n            other.evmAddress == null\n        ) {\n            return this.num.compare(other.num);\n        } else {\n            return 1;\n        }\n    }\n}\n\nCACHE.setAccountIdConstructor(\n    (shard, realm, key) => new AccountId(shard, realm, Long.ZERO, key),\n);\n"],"names":["AccountId","constructor","props","realm","num","aliasKey","evmAddress","result","EntityIdHelper.constructor","this","shard","_checksum","fromString","text","Long","ZERO","startsWith","length","EvmAddress","EntityIdHelper.fromStringSplitter","Number","isNaN","Error","numOrHex","PublicKey","fromEvmAddress","evmAddressObj","shardLong","realmLong","address","EntityIdHelper.fromEvmAddress","toString","undefined","fromEvmPublicAddress","_fromProtobuf","id","alias","fromBytes","Key","_fromProtobufKey","HieroProto","proto","decode","shardNum","realmNum","accountNum","checksum","getEvmAddress","populateAccountNum","client","mirrorUrl","mirrorNetwork","slice","indexOf","Promise","resolve","setTimeout","url","response","fetch","mirrorAccountId","json","account","lastIndexOf","populateAccountEvmAddress","evm_address","validate","console","warn","validateChecksum","EntityIdHelper.validateChecksum","bytes","AccountID","fromSolidityAddress","isLongZeroAddress","hex.decode","EntityIdHelper.fromSolidityAddress","toSolidityAddress","_key","_type","toEvmAddress","EntityIdHelper.toSolidityAddress","EntityIdHelper.toEvmAddress","toBytes","_toProtobuf","encode","_toProtobufKey","finish","_bytes","isHollowAccount","eq","fromBigInt","toStringWithChecksum","EntityIdHelper.toStringWithChecksum","equals","other","clone","compare","comparison","t","o","CACHE","setAccountIdConstructor","key"],"mappings":"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"}