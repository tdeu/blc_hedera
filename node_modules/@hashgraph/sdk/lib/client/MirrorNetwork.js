import e from"../MirrorNode.js";import t from"./ManagedNetwork.js";class r extends t{constructor(e){super(e)}setNetwork(e){this._setNetwork(new Map(e.map((e=>[e,e]))))}get network(){var e=[];for(const t of this._nodes)e.push(t.address.toString());return e}_createNodeFromNetworkEntry(t){return new e({newNode:{address:t[1],channelInitFunction:this._createNetworkChannel}}).setMinBackoff(this._minBackoff)}_getNodesToRemove(e){const t=[],r=Object.values(e);for(let e=this._nodes.length-1;e>=0;e--){const o=this._nodes[e];r.includes(o.address.toString())||t.push(e)}return t}getNextMirrorNode(){return this._getNumberOfMostHealthyNodes(1)[0]}}export{r as default};
//# sourceMappingURL=MirrorNetwork.js.map
