import e from"bignumber.js";import t from"long";const n="This value cannot be null | undefined.",r="This value must be a string or Uint8Array.",o="The provided variable must be an Array.",i="This value must be a String, Number, or BigNumber to be converted.",f="This value must be a String, Number, or BigNumber to be converted.",u="Unable to parse given variable. Returns NaN.";function a(e){return null!=e}function b(e){return a(e)&&e instanceof Uint8Array}function s(e){return a(e)&&("number"==typeof e||e instanceof Number)}function c(t){return a(t)&&t instanceof e}function h(e){return a(e)&&e instanceof t}function g(e){return a(e)&&"string"==typeof e}function l(e){return a(e)&&(g(e)||b(e))}function w(e){for(let t=0;t<12;t++)if(0!=e[t])return!1;return!0}function y(e){if(e.isNegative())throw new Error("negative value not allowed");return e}function m(e){if(a(e))return e;throw new Error(n)}function p(e){if(l(m(e)))return e;throw new Error(r)}function v(t){if(m(t),c(t)||g(t)||s(t)||h(t))return new e(t);throw new Error(i)}function N(e){if(e instanceof Array)return e.map(v);throw new Error(o)}function d(e){if(m(e),c(e)||g(e)||s(e)||h(e)){const t=parseInt(e);if(isNaN(t))throw new Error(u);return t}throw new Error(f)}function E(e,t=0,n=e.byteLength){if(!(Number.isInteger(t)&&t>=0))throw new Error("Invalid offset!");if(!(Number.isInteger(n)&&n>=0))throw new Error("Invalid length!");return new DataView(e.buffer,e.byteOffset+t,Math.min(n,e.byteLength-t))}function L(e,t,n=new Set){if("object"==typeof e&&"object"==typeof t){const r=Object.keys(e),o=Object.keys(t);if(r.length!==o.length)return!1;for(let i=0;i<r.length;i++){if(r[i]!==o[i])return!1;if(!n.has(r[i])&&!L(e[r[i]],t[o[i]],n))return!1}return!0}return("number"==typeof e&&"number"==typeof t||"string"==typeof e&&"string"==typeof t||"boolean"==typeof e&&"boolean"==typeof t)&&e===t}function T(e){for(var t,n,r=e.length;0!==r;)n=Math.floor(Math.random()*r),t=e[r-=1],e[r]=e[n],e[n]=t}function j(e,t){if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;const n=new DataView(e.buffer,e.byteOffset,e.byteLength),r=new DataView(t.buffer,t.byteOffset,t.byteLength);let o=e.byteLength;for(;o--;)if(n.getUint8(o)!==r.getUint8(o))return!1;return!0}function I(e){return new Promise((t=>setTimeout(t,e)))}export{i as FUNCTION_CONVERT_TO_BIGNUMBER_ERROR,f as FUNCTION_CONVERT_TO_NUMBER_ERROR,u as FUNCTION_CONVERT_TO_NUMBER_PARSE_ERROR,o as REQUIRE_ARRAY_ERROR,n as REQUIRE_NON_NULL_ERROR,r as REQUIRE_STRING_OR_UINT8ARRAY_ERROR,j as arrayEqual,L as compare,v as convertToBigNumber,N as convertToBigNumberArray,d as convertToNumber,c as isBigNumber,h as isLong,w as isLongZeroAddress,a as isNonNull,s as isNumber,g as isString,l as isStringOrUint8Array,b as isUint8Array,m as requireNonNull,y as requireNotNegative,p as requireStringOrUint8Array,E as safeView,T as shuffle,I as wait};
//# sourceMappingURL=util.js.map
