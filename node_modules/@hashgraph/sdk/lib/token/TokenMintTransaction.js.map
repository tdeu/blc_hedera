{"version":3,"file":"TokenMintTransaction.js","sources":["../../src/token/TokenMintTransaction.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport TokenId from \"./TokenId.js\";\nimport Transaction, {\n    TRANSACTION_REGISTRY,\n} from \"../transaction/Transaction.js\";\nimport Long from \"long\";\nimport * as hex from \"../encoding/hex.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITransaction} HieroProto.proto.ITransaction\n * @typedef {import(\"@hashgraph/proto\").proto.ISignedTransaction} HieroProto.proto.ISignedTransaction\n * @typedef {import(\"@hashgraph/proto\").proto.TransactionBody} HieroProto.proto.TransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionBody} HieroProto.proto.ITransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITransactionResponse} HieroProto.proto.ITransactionResponse\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenMintTransactionBody} HieroProto.proto.ITokenMintTransactionBody\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"../channel/Channel.js\").default} Channel\n * @typedef {import(\"../client/Client.js\").default<*, *>} Client\n * @typedef {import(\"../account/AccountId.js\").default} AccountId\n * @typedef {import(\"../transaction/TransactionId.js\").default} TransactionId\n */\n\n/**\n * Mint a new Hederaâ„¢ crypto-currency token.\n */\nexport default class TokenMintTransaction extends Transaction {\n    /**\n     * @param {object} [props]\n     * @param {TokenId | string} [props.tokenId]\n     * @param {Long | number} [props.amount]\n     * @param {Uint8Array[]} [props.metadata]\n     */\n    constructor(props = {}) {\n        super();\n\n        /**\n         * @private\n         * @type {?TokenId}\n         */\n        this._tokenId = null;\n\n        /**\n         * @private\n         * @type {?Long}\n         */\n        this._amount = null;\n\n        /**\n         * @private\n         * @type {Uint8Array[]}\n         */\n        this._metadata = [];\n\n        if (props.tokenId != null) {\n            this.setTokenId(props.tokenId);\n        }\n\n        if (props.amount != null) {\n            this.setAmount(props.amount);\n        }\n\n        if (props.metadata != null) {\n            this.setMetadata(props.metadata);\n        }\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITransaction[]} transactions\n     * @param {HieroProto.proto.ISignedTransaction[]} signedTransactions\n     * @param {TransactionId[]} transactionIds\n     * @param {AccountId[]} nodeIds\n     * @param {HieroProto.proto.ITransactionBody[]} bodies\n     * @returns {TokenMintTransaction}\n     */\n    static _fromProtobuf(\n        transactions,\n        signedTransactions,\n        transactionIds,\n        nodeIds,\n        bodies,\n    ) {\n        const body = bodies[0];\n        const mintToken =\n            /** @type {HieroProto.proto.ITokenMintTransactionBody} */ (\n                body.tokenMint\n            );\n\n        return Transaction._fromProtobufTransactions(\n            new TokenMintTransaction({\n                tokenId:\n                    mintToken.token != null\n                        ? TokenId._fromProtobuf(mintToken.token)\n                        : undefined,\n                amount: mintToken.amount != null ? mintToken.amount : undefined,\n                metadata:\n                    mintToken.metadata != null ? mintToken.metadata : undefined,\n            }),\n            transactions,\n            signedTransactions,\n            transactionIds,\n            nodeIds,\n            bodies,\n        );\n    }\n\n    /**\n     * @returns {?TokenId}\n     */\n    get tokenId() {\n        return this._tokenId;\n    }\n\n    /**\n     * @param {TokenId | string} tokenId\n     * @returns {this}\n     */\n    setTokenId(tokenId) {\n        this._requireNotFrozen();\n        this._tokenId =\n            typeof tokenId === \"string\"\n                ? TokenId.fromString(tokenId)\n                : tokenId.clone();\n\n        return this;\n    }\n\n    /**\n     * @returns {?Long}\n     */\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * @param {Long | number} amount\n     * @returns {this}\n     */\n    setAmount(amount) {\n        this._requireNotFrozen();\n        this._amount = amount instanceof Long ? amount : Long.fromValue(amount);\n\n        return this;\n    }\n\n    /**\n     * @param {Client} client\n     */\n    _validateChecksums(client) {\n        if (this._tokenId != null) {\n            this._tokenId.validateChecksum(client);\n        }\n    }\n\n    /**\n     * @returns {Uint8Array[]}\n     */\n    get metadata() {\n        return this._metadata;\n    }\n\n    /**\n     * @param {Uint8Array | string} metadata\n     * @returns {this}\n     */\n    addMetadata(metadata) {\n        this._requireNotFrozen();\n\n        if (typeof metadata === \"string\") {\n            console.warn(\n                \"Passing a `string` for token metadata is considered a bug, and has been removed. Please provide a `Uint8Array` instead.\",\n            );\n        }\n\n        this._metadata.push(\n            typeof metadata === \"string\" ? hex.decode(metadata) : metadata,\n        );\n\n        return this;\n    }\n\n    /**\n     * @param {Uint8Array[]} metadata\n     * @returns {this}\n     */\n    setMetadata(metadata) {\n        this._requireNotFrozen();\n\n        for (const data of metadata) {\n            if (typeof data === \"string\") {\n                console.warn(\n                    \"Passing a `string` for token metadata is considered a bug, and has been removed. Please provide a `Uint8Array` instead.\",\n                );\n                break;\n            }\n        }\n\n        this._metadata = metadata.map((data) =>\n            typeof data === \"string\" ? hex.decode(data) : data,\n        );\n\n        return this;\n    }\n\n    /**\n     * @override\n     * @internal\n     * @param {Channel} channel\n     * @param {HieroProto.proto.ITransaction} request\n     * @returns {Promise<HieroProto.proto.ITransactionResponse>}\n     */\n    _execute(channel, request) {\n        return channel.token.mintToken(request);\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {NonNullable<HieroProto.proto.TransactionBody[\"data\"]>}\n     */\n    _getTransactionDataCase() {\n        return \"tokenMint\";\n    }\n\n    /**\n     * @override\n     * @protected\n     * @returns {HieroProto.proto.ITokenMintTransactionBody}\n     */\n    _makeTransactionData() {\n        return {\n            amount: this._amount,\n            token: this._tokenId != null ? this._tokenId._toProtobuf() : null,\n            metadata: this._metadata,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    _getLogId() {\n        const timestamp = /** @type {import(\"../Timestamp.js\").default} */ (\n            this._transactionIds.current.validStart\n        );\n        return `TokenMintTransaction:${timestamp.toString()}`;\n    }\n}\n\nTRANSACTION_REGISTRY.set(\n    \"tokenMint\",\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    TokenMintTransaction._fromProtobuf,\n);\n"],"names":["TokenMintTransaction","Transaction","constructor","props","super","this","_tokenId","_amount","_metadata","tokenId","setTokenId","amount","setAmount","metadata","setMetadata","_fromProtobuf","transactions","signedTransactions","transactionIds","nodeIds","bodies","mintToken","_fromProtobufTransactions","token","TokenId","undefined","_requireNotFrozen","fromString","clone","Long","fromValue","_validateChecksums","client","validateChecksum","addMetadata","console","warn","push","hex.decode","data","map","_execute","channel","request","_getTransactionDataCase","_makeTransactionData","_toProtobuf","_getLogId","_transactionIds","current","toString","TRANSACTION_REGISTRY","set"],"mappings":"oKA8Be,MAAMA,UAA6BC,EAO9C,WAAAC,CAAYC,EAAQ,IAChBC,QAMAC,KAAKC,SAAW,KAMhBD,KAAKE,QAAU,KAMfF,KAAKG,UAAY,GAEI,MAAjBL,EAAMM,SACNJ,KAAKK,WAAWP,EAAMM,SAGN,MAAhBN,EAAMQ,QACNN,KAAKO,UAAUT,EAAMQ,QAGH,MAAlBR,EAAMU,UACNR,KAAKS,YAAYX,EAAMU,SAEnC,CAWI,oBAAOE,CACHC,EACAC,EACAC,EACAC,EACAC,GAEA,MACMC,EADOD,EAAO,GAIf,UAEL,OAAOnB,EAAYqB,0BACf,IAAItB,EAAqB,CACrBS,QACuB,MAAnBY,EAAUE,MACJC,EAAQT,cAAcM,EAAUE,YAChCE,EACVd,OAA4B,MAApBU,EAAUV,OAAiBU,EAAUV,YAASc,EACtDZ,SAC0B,MAAtBQ,EAAUR,SAAmBQ,EAAUR,cAAWY,IAE1DT,EACAC,EACAC,EACAC,EACAC,EAEZ,CAKI,WAAIX,GACA,OAAOJ,KAAKC,QACpB,CAMI,UAAAI,CAAWD,GAOP,OANAJ,KAAKqB,oBACLrB,KAAKC,SACkB,iBAAZG,EACDe,EAAQG,WAAWlB,GACnBA,EAAQmB,QAEXvB,IACf,CAKI,UAAIM,GACA,OAAON,KAAKE,OACpB,CAMI,SAAAK,CAAUD,GAIN,OAHAN,KAAKqB,oBACLrB,KAAKE,QAAUI,aAAkBkB,EAAOlB,EAASkB,EAAKC,UAAUnB,GAEzDN,IACf,CAKI,kBAAA0B,CAAmBC,GACM,MAAjB3B,KAAKC,UACLD,KAAKC,SAAS2B,iBAAiBD,EAE3C,CAKI,YAAInB,GACA,OAAOR,KAAKG,SACpB,CAMI,WAAA0B,CAAYrB,GAaR,OAZAR,KAAKqB,oBAEmB,iBAAbb,GACPsB,QAAQC,KACJ,2HAIR/B,KAAKG,UAAU6B,KACS,iBAAbxB,EAAwByB,EAAWzB,GAAYA,GAGnDR,IACf,CAMI,WAAAS,CAAYD,GACRR,KAAKqB,oBAEL,IAAK,MAAMa,KAAQ1B,EACf,GAAoB,iBAAT0B,EAAmB,CAC1BJ,QAAQC,KACJ,2HAEJ,KAChB,CAOQ,OAJA/B,KAAKG,UAAYK,EAAS2B,KAAKD,GACX,iBAATA,EAAoBD,EAAWC,GAAQA,IAG3ClC,IACf,CASI,QAAAoC,CAASC,EAASC,GACd,OAAOD,EAAQnB,MAAMF,UAAUsB,EACvC,CAOI,uBAAAC,GACI,MAAO,WACf,CAOI,oBAAAC,GACI,MAAO,CACHlC,OAAQN,KAAKE,QACbgB,MAAwB,MAAjBlB,KAAKC,SAAmBD,KAAKC,SAASwC,cAAgB,KAC7DjC,SAAUR,KAAKG,UAE3B,CAKI,SAAAuC,GAII,MAAO,wBAFH1C,KAAK2C,gBAAgBC,QACxB,WACwCC,YACjD,EAGAC,EAAqBC,IACjB,YAEApD,EAAqBe"}