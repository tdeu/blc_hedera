{"version":3,"file":"TokenTransfer.js","sources":["../../src/token/TokenTransfer.js"],"sourcesContent":["// SPDX-License-Identifier: Apache-2.0\n\nimport Long from \"long\";\nimport AccountId from \"../account/AccountId.js\";\nimport TokenId from \"./TokenId.js\";\n\n/**\n * @namespace proto\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenTransferList} HieroProto.proto.ITokenTransferList\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountAmount} HieroProto.proto.IAccountAmount\n * @typedef {import(\"@hashgraph/proto\").proto.IAccountID} HieroProto.proto.IAccountID\n * @typedef {import(\"@hashgraph/proto\").proto.ITokenID} HieroProto.proto.ITokenID\n */\n\n/**\n * @typedef {import(\"bignumber.js\").default} BigNumber\n */\n\n/**\n * @typedef {object} TokenTransferJSON\n * @property {string} tokenId\n * @property {string} accountId\n * @property {?number} expectedDecimals\n * @property {string} amount\n * @property {boolean} isApproved\n */\n\n/**\n * An account, and the amount that it sends or receives during a cryptocurrency tokentransfer.\n */\nexport default class TokenTransfer {\n    /**\n     * @internal\n     * @param {object} props\n     * @param {TokenId | string} props.tokenId\n     * @param {AccountId | string} props.accountId\n     * @param {number | null} props.expectedDecimals\n     * @param {Long | number} props.amount\n     * @param {boolean} props.isApproved\n     */\n    constructor(props) {\n        /**\n         * The Token ID that sends or receives cryptocurrency.\n         *\n         * @readonly\n         */\n        this.tokenId =\n            props.tokenId instanceof TokenId\n                ? props.tokenId\n                : TokenId.fromString(props.tokenId);\n\n        /**\n         * The Account ID that sends or receives cryptocurrency.\n         *\n         * @readonly\n         */\n        this.accountId =\n            props.accountId instanceof AccountId\n                ? props.accountId\n                : AccountId.fromString(props.accountId);\n\n        this.expectedDecimals = props.expectedDecimals;\n        this.amount = Long.fromValue(props.amount);\n        this.isApproved = props.isApproved;\n    }\n\n    /**\n     * @internal\n     * @param {HieroProto.proto.ITokenTransferList[]} tokenTransfers\n     * @returns {TokenTransfer[]}\n     */\n    static _fromProtobuf(tokenTransfers) {\n        const transfers = [];\n\n        for (const tokenTransfer of tokenTransfers) {\n            const tokenId = TokenId._fromProtobuf(\n                /** @type {HieroProto.proto.ITokenID} */ (tokenTransfer.token),\n            );\n            const expectedDecimals =\n                tokenTransfer.expectedDecimals != null\n                    ? Object.hasOwn(tokenTransfer.expectedDecimals, \"value\")\n                        ? tokenTransfer.expectedDecimals.value\n                        : null\n                    : null;\n\n            for (const transfer of tokenTransfer.transfers != null\n                ? tokenTransfer.transfers\n                : []) {\n                transfers.push(\n                    new TokenTransfer({\n                        tokenId,\n                        accountId: AccountId._fromProtobuf(\n                            /** @type {HieroProto.proto.IAccountID} */ (\n                                transfer.accountID\n                            ),\n                        ),\n                        expectedDecimals: expectedDecimals || null,\n                        amount:\n                            transfer.amount != null\n                                ? transfer.amount\n                                : Long.ZERO,\n                        isApproved: transfer.isApproval == true,\n                    }),\n                );\n            }\n        }\n\n        return transfers;\n    }\n\n    /**\n     * @internal\n     * @returns {HieroProto.proto.IAccountAmount}\n     */\n    _toProtobuf() {\n        return {\n            accountID: this.accountId._toProtobuf(),\n            amount: this.amount,\n            isApproval: this.isApproved,\n        };\n    }\n\n    /**\n     * @returns {TokenTransferJSON}\n     */\n    toJSON() {\n        return {\n            tokenId: this.tokenId.toString(),\n            accountId: this.accountId.toString(),\n            expectedDecimals: this.expectedDecimals,\n            amount: this.amount.toString(),\n            isApproved: this.isApproved,\n        };\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString() {\n        return JSON.stringify(this.toJSON());\n    }\n}\n"],"names":["TokenTransfer","constructor","props","this","tokenId","TokenId","fromString","accountId","AccountId","expectedDecimals","amount","Long","fromValue","isApproved","_fromProtobuf","tokenTransfers","transfers","tokenTransfer","Object","hasOwn","value","transfer","push","ZERO","isApproval","_toProtobuf","accountID","toJSON","toString","JSON","stringify"],"mappings":"uFA8Be,MAAMA,EAUjB,WAAAC,CAAYC,GAMRC,KAAKC,QACDF,EAAME,mBAAmBC,EACnBH,EAAME,QACNC,EAAQC,WAAWJ,EAAME,SAOnCD,KAAKI,UACDL,EAAMK,qBAAqBC,EACrBN,EAAMK,UACNC,EAAUF,WAAWJ,EAAMK,WAErCJ,KAAKM,iBAAmBP,EAAMO,iBAC9BN,KAAKO,OAASC,EAAKC,UAAUV,EAAMQ,QACnCP,KAAKU,WAAaX,EAAMW,UAChC,CAOI,oBAAOC,CAAcC,GACjB,MAAMC,EAAY,GAElB,IAAK,MAAMC,KAAiBF,EAAgB,CACxC,MAAMX,EAAUC,EAAQS,cACsBG,EAAmB,OAE3DR,EACgC,MAAlCQ,EAAcR,kBACRS,OAAOC,OAAOF,EAAcR,iBAAkB,SAC1CQ,EAAcR,iBAAiBW,MAEnC,KAEV,IAAK,MAAMC,KAAuC,MAA3BJ,EAAcD,UAC/BC,EAAcD,UACd,GACFA,EAAUM,KACN,IAAItB,EAAc,CACdI,UACAG,UAAWC,EAAUM,cAEbO,EAChC,WAEwBZ,iBAAkBA,GAAoB,KACtCC,OACuB,MAAnBW,EAASX,OACHW,EAASX,OACTC,EAAKY,KACfV,WAAmC,GAAvBQ,EAASG,aAI7C,CAEQ,OAAOR,CACf,CAMI,WAAAS,GACI,MAAO,CACHC,UAAWvB,KAAKI,UAAUkB,cAC1Bf,OAAQP,KAAKO,OACbc,WAAYrB,KAAKU,WAE7B,CAKI,MAAAc,GACI,MAAO,CACHvB,QAASD,KAAKC,QAAQwB,WACtBrB,UAAWJ,KAAKI,UAAUqB,WAC1BnB,iBAAkBN,KAAKM,iBACvBC,OAAQP,KAAKO,OAAOkB,WACpBf,WAAYV,KAAKU,WAE7B,CAKI,QAAAe,GACI,OAAOC,KAAKC,UAAU3B,KAAKwB,SACnC"}