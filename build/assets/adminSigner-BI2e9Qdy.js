import{J as o,aN as l,be as s}from"./index-DokNjuN4.js";class d{config=null;initialized=!1;async initialize(){if(this.initialized&&this.config)return this.config;try{const i="98570d874eda35327ae5253c87aa74a5b0e9e33e2189b022a0f8877ed812ee0a",n=new o("https://testnet.hashio.io/api",{name:"hedera-testnet",chainId:296}),e=new l(i,n),a=await e.getAddress();console.log("✅ Admin signer initialized:",a);const c=await n.getBalance(a),t=parseFloat(s(c));return console.log("💰 Admin wallet balance:",t,"HBAR"),t<1&&console.warn("⚠️ Low admin wallet balance! Transactions may fail. Current balance:",t,"HBAR"),this.config={provider:n,signer:e,address:a},this.initialized=!0,this.config}catch(i){throw console.error("❌ Failed to initialize admin signer:",i),i}}async getSigner(){return this.config||await this.initialize(),this.config.signer}async getAddress(){return this.config||await this.initialize(),this.config.address}async getProvider(){return this.config||await this.initialize(),this.config.provider}isInitialized(){return this.initialized}async getBalance(){this.config||await this.initialize();const i=await this.config.provider.getBalance(this.config.address);return s(i)}async verifyBalance(i=1){const n=await this.getBalance(),e=parseFloat(n);return e<i?(console.error(`❌ Insufficient admin balance: ${e} HBAR (minimum: ${i} HBAR)`),!1):(console.log(`✅ Admin balance verified: ${e} HBAR`),!0)}}const r=new d;async function h(){return r.getSigner()}async function u(){return r.getAddress()}export{r as adminSignerService,u as getAdminAddress,h as getAdminSigner};
